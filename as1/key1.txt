1.1 1. e m a c s SP e x e r 1 . h t m l Enter
    2. C-n C-f
    3. C-s L a C-u 2 C-b
    4. C-s s e l f C-u 4 C-b
    5. C-s a r r o w C-u 5 C-b
    6. C-e
    7. C-a
    8. I used emacs keys (with control) to move throughout the page.
    9. I did not. I used C-p (up), C-n (down), C-b (back), C-f (forward).
    10. C-x C-c
1.2 1. e m a c s SP e x e r 2 . h t m l Enter
    2. M-x l i n u m - m o d e C-s < ! C-a C-k
    3. C-s D e l C-a C-k
    4. C-s w i k i C-s C-s C-a C-p C-u 6 C-k
    5. C-s <! C-u 2 C-b C-u 6 C-d
1.3 1. e m a c s SP e x e r 3 . h t m l Enter
    2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 37 Enter SP .
    3. M-% U T F - 8 Enter U S - A S C I I Enter .
    4. C-s < / o Enter C-a Enter
    5. C-x C-c y Enter d i f f SP - u SP e x e r 1 . h t m l SP e x e r 3 . h t 
m l SP > e x e r 3 . d i f f
1.4 1. c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t 
m l
    2. e m a c s e x e r 4 . h t m l
    3. C-s <! C-s C-a C-f C-SP C-e M-w M-< C-s L a b C-n C-n C-y 
    4. C-s <! C-s C-a C-f C-e M-w M-< C-s H o m e C-n C-n C-y
       C-s <! C-s C-s C-a C-f C-SP C-u 2 C-n C-e M-w M-< C-s S u b m C-n C-n 
C-y C-a C-d C-p C-d
       C-s <! C-u 2 C-b C-SP C-u 6 C-f M-w M-< C-s l o g SP l i n e C-f C-y
    5. C-s - - - SP C-a C-SP M-> C-w
    6. C-x u
    7. M-< C-s e x e r 1 C-a < ! - - M-> - - >
    8. M-< C-s < o l > C-s C-s C-s C-s C-s C-s
       	   I found 7 instances.
       M-< M-% < o l > SP Enter < O l > Enter !
    9. d i f f SP - u SP e x e r 1 . h t m l SP e x e r 4 . h t m l SP > e x e r
 4 . d i f f Enter
       e m a c s SP e x e r 4 . d i f f
1.5 1. e m a c s Enter M-! m k d i r SP ~ / j u n k Enter
    2. C-x C-f ~ / j u n k / h e l l o . c  Enter C-x C-w Enter
       *Typed out given c code*
    3. M-x c o m p i l e Enter m a k e SP - k SP h e l l o . c Enter
    4. . / h e l l o SP > h e l l o . o u t
    5. M-! c a t SP h e l l o . o u t SP > > SP ~ / c s 3 5 l / a s 1 /  k e y
 1  . t x t 
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}
1.6 1. C-x b Enter
    2. ( r a n d o m ) C-j Enter
    3. ( s e t q SP x ( r a n d o m ) ) C-j Enter //-1000278277145540493
       ( s e t q SP y ( r a n d o m ) ) C-j Enter //-407454645627560705
    4. ( * SP x y ) C-j Enter //-78828042525770099
       The answer is not mathematically correct.
    5. M-: ( * SP x y ) // -78828042525770099 (#o173477445003672277215, 
#x1ee7f2501ee97e8d)
    6. There is likely an algorithm used to generate random numbers, but that 
means that the numbers are not truly random in the mathematical sense. They are
 based on seeds.
    7. Since the order of magnitude is 2^63, the  probability of x*y <= 2^63 is
 the reinman sum of conditional probablites. P(x <= 2 | y = 2^62) + P(x <= @^2
 | y = 2^61) + ... + P(x <= 2^60 | y = 2). This probability computes to an 
extremely small number. 
